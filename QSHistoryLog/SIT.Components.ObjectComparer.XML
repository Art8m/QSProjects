<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SIT.Components.ObjectComparer</name>
    </assembly>
    <members>
        <member name="M:SIT.Components.ObjectComparer.ChangeSet.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SIT.Components.ObjectComparer.ChangeSet"/> class.
            </summary>
        </member>
        <member name="T:SIT.Components.ObjectComparer.CompareItem">
            <summary>
            Abstract. Holds data of two snap shots as base for creating a change set
            </summary>
        </member>
        <member name="F:SIT.Components.ObjectComparer.CompareItem._trace">
            <summary>
            Trace helper
            </summary>
        </member>
        <member name="M:SIT.Components.ObjectComparer.CompareItem.CreateEmpty">
            <summary>
            Creates an empty <c>CompareItem</c>
            </summary>
            <returns>An instance of <c>CompareItem</c></returns>
        </member>
        <!-- Ungültiger XML-Kommentar wurde für den Member 'M:SIT.Components.ObjectComparer.CompareItem.CreateEmpty(System.String)' ignoriert -->
        <member name="F:SIT.Components.ObjectComparer.CompareItem._changeType">
            <summary>
            Holds the value for type ofg change
            </summary>
        </member>
        <member name="F:SIT.Components.ObjectComparer.CompareItem._typeName">
            <summary>
            Holds the type name of the objects in <c>ValueA</c> and <c>ValueB</c>
            </summary>
        </member>
        <member name="F:SIT.Components.ObjectComparer.CompareItem._name">
            <summary>
            Holds the display name of the objects in <c>ValueA</c> and <c>ValueB</c>
            </summary>
        </member>
        <member name="F:SIT.Components.ObjectComparer.CompareItem._valueA">
            <summary>
            Holds object A
            </summary>
        </member>
        <member name="F:SIT.Components.ObjectComparer.CompareItem._valueB">
            <summary>
            Holds object B
            </summary>
        </member>
        <member name="F:SIT.Components.ObjectComparer.CompareItem._idPropertyName">
            <summary>
            Holds the name of the property which is used for list comparison of <c>ValueA</c> and <c>ValueB</c>
            </summary>
        </member>
        <member name="F:SIT.Components.ObjectComparer.CompareItem._idPropertyValueA">
            <summary>
            Holds the value of the property with name <c>_idPropertyName</c> of object A
            </summary>
        </member>
        <member name="F:SIT.Components.ObjectComparer.CompareItem._idPropertyValueB">
            <summary>
            Holds the value of the property with name <c>_idPropertyName</c> of object B
            </summary>
        </member>
        <member name="F:SIT.Components.ObjectComparer.CompareItem._parent">
            <summary>
            Holds reference to a possible parent <c>CompareItem</c>
            </summary>
        </member>
        <member name="M:SIT.Components.ObjectComparer.CompareItem.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:SIT.Components.ObjectComparer.CompareItem.Create(SIT.Components.ObjectComparer.Snapshot,SIT.Components.ObjectComparer.Snapshot)">
            <summary>
            Used in derived class for creating/extracting base infos of given snap shots
            </summary>
            <param name="a">Snap shot A</param>
            <param name="b">Snap shot B</param>
            <returns>The type of change</returns>
        </member>
        <member name="P:SIT.Components.ObjectComparer.CompareItem.Trace">
            <summary>
            Trace helper singleton
            </summary>
        </member>
        <member name="P:SIT.Components.ObjectComparer.CompareItem.ChangeType">
            <summary>
            Gets or sets the type of change
            </summary>
        </member>
        <member name="P:SIT.Components.ObjectComparer.CompareItem.TypeName">
            <summary>
            Gets or sets the type name of the objects in <c>ValueA</c> and <c>ValueB</c>
            </summary>
        </member>
        <member name="P:SIT.Components.ObjectComparer.CompareItem.Name">
            <summary>
            Gets or sets the display name of the objects in <c>ValueA</c> and <c>ValueB</c>
            </summary>
        </member>
        <member name="P:SIT.Components.ObjectComparer.CompareItem.ValueA">
            <summary>
            Gets or sets object A
            </summary>
        </member>
        <member name="P:SIT.Components.ObjectComparer.CompareItem.ValueB">
            <summary>
            Gets or sets object B
            </summary>
        </member>
        <member name="P:SIT.Components.ObjectComparer.CompareItem.IdPropertyName">
            <summary>
            Gets or sets the name of the property which is used for list comparison of <c>ValueA</c> and <c>ValueB</c>
            </summary>
        </member>
        <member name="P:SIT.Components.ObjectComparer.CompareItem.IdPropertyValueA">
            <summary>
            Gets or sets the value the property with name <c>IdPropertyName</c> of object A
            </summary>
        </member>
        <member name="P:SIT.Components.ObjectComparer.CompareItem.IdPropertyValueB">
            <summary>
            Gets or sets the value the property with name <c>IdPropertyName</c> of object B
            </summary>
        </member>
        <member name="P:SIT.Components.ObjectComparer.CompareItem.Parent">
            <summary>
            Gets or sets the reference to a possible parent <c>CompareItem</c>
            </summary>
        </member>
        <member name="T:SIT.Components.ObjectComparer.CompareAttribute">
            <summary>
            Defines the base (must be derived) for attributes analyzed by the ObjectComparer.
            </summary>
        </member>
        <member name="M:SIT.Components.ObjectComparer.CompareAttribute.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SIT.Components.ObjectComparer.CompareAttribute.#ctor(System.String)">
            <summary>
            Constructor setting the DisplayName property
            </summary>
            <param name="displayName">The displayname to set</param>
        </member>
        <member name="F:SIT.Components.ObjectComparer.CompareAttribute._displayName">
            <summary>
            Displayname
            </summary>
        </member>
        <member name="P:SIT.Components.ObjectComparer.CompareAttribute.DisplayName">
            <summary>
            Gets the DisplayName
            </summary>
        </member>
        <member name="T:SIT.Components.ObjectComparer.CompareClassAttribute">
            <summary>
            Attribute used to tag a type (class) to be processed by ObjectComparer
            </summary>
        </member>
        <member name="M:SIT.Components.ObjectComparer.CompareClassAttribute.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:SIT.Components.ObjectComparer.CompareClassAttribute.#ctor(System.String)">
            <summary>
            Creates an instance of <see cref="T:SIT.Components.ObjectComparer.CompareClassAttribute"/>
            </summary>
            <param name="displayName">The display name which should be used</param>
        </member>
        <member name="M:SIT.Components.ObjectComparer.CompareClassAttribute.#ctor(System.String,System.String)">
            <summary>
            Creates an instance of <see cref="T:SIT.Components.ObjectComparer.CompareClassAttribute"/>
            </summary>
            <param name="displayName">The display name which should be used</param>
            <param name="idPropertyNamedisplayName">
            The name of the property which holds the unique identifier for objects of this type
            <example>
            The following example shows how objects in a list are found which has to be compared.
            <code source="..\Documentation\Examples\Example_IdPropertyName\Program.cs" lang="cs"/>
            </example>
            </param>
        </member>
        <member name="P:SIT.Components.ObjectComparer.CompareClassAttribute.IdPropertyName">
            <summary>
            Gets or sets the name of the property which makes the runtime object of the described type uniqe.
            </summary>
            <example>
            The following example shows how objects in a list are found which has to be compared.
            <code source="..\Documentation\Examples\Example_IdPropertyName\Program.cs" lang="cs"/>
            </example>
            <remarks>
            This identifier (id) is used to find same/compareable objects in lists of snapshots.
            </remarks>
        </member>
        <member name="T:SIT.Components.ObjectComparer.ClassDescription">
            <summary>
            Holds meta data describing types (classes).
            - used for configuration
            - used for caching
            </summary>
        </member>
        <member name="T:SIT.Components.ObjectComparer.ItemDescription">
            <summary>
            Base class used to hold meta data for types, properties and fields 
            to serialize/deserialize it
            </summary>
        </member>
        <member name="P:SIT.Components.ObjectComparer.ItemDescription.FullName">
            <summary>
            Gets or sets the name or full name of the type, property or field which is described
            </summary>
        </member>
        <member name="P:SIT.Components.ObjectComparer.ItemDescription.DisplayName">
            <summary>
            Gets or sets the name to display of the type, property or field which is described
            </summary>
        </member>
        <member name="M:SIT.Components.ObjectComparer.ClassDescription.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:SIT.Components.ObjectComparer.CheckStopRecursionDelegate">
            <summary>
            Delegate for defining function pointer to method that checks if a recursion should stop or not.
            </summary>
            <param name="context">The context object used</param>
            <param name="parentValue">The value of the parent object</param>
            <param name="parentType">The type of the parent object</param>
            <param name="childValue">The value of the child object belonging to the given parent object</param>
            <param name="childPi">The <c>PropertyInfo</c> instance of the child object belonging to the given parent object</param>
            <returns><c>true</c>, when recursion should be stoppen, otherwise <c>false</c></returns>
        </member>
        <member name="T:SIT.Components.ObjectComparer.CheckIgnoreMemberDelegate">
            <summary>
            Represents the method that is used for checking if a member should be ignored
            </summary>
            <param name="member">Either a string for the members name, a PropertyInfo object or an FieldInfo object</param>
            <returns><c>true</c> if member has to be ignored; otherwise <c>false</c></returns>
        </member>
        <member name="T:SIT.Components.ObjectComparer.IConfiguration">
            <summary>
            Interface for configuring snaph shot creation
            </summary>
        </member>
        <member name="M:SIT.Components.ObjectComparer.IConfiguration.CheckStopRecursion(SIT.Components.ObjectComparer.Context,System.Object,System.Type,System.Object,System.Reflection.MemberInfo)">
            <summary>
            Checks if a recursion should be stopped.
            </summary>
            <param name="context">The context object used</param>
            <param name="parentValue">The value of the parent object</param>
            <param name="parentType">The type of the parent object</param>
            <param name="childValue">The value of the child object belonging to the given parent object</param>
            <param name="childPi">The <c>PropertyInfo</c> instance of the child object belonging to the given parent object</param>
            <returns><c>true</c>, when recursion should be stoppen, otherwise <c>false</c></returns>
            <remarks>
            The check is executed as defined in the delegate <see cref="P:SIT.Components.ObjectComparer.IConfiguration.CheckStopRecursionFunc"/>.
            If that property is not set <c>true</c> is returned
            </remarks>
        </member>
        <member name="M:SIT.Components.ObjectComparer.IConfiguration.CheckIgnoreMember(System.Object)">
            <summary>
            Checks if a member of a type should be ignored or not.
            </summary>
            <param name="member">Either a string for the members name, a PropertyInfo object or an FieldInfo object</param>
            <returns><c>true</c> if member has to be ignored; otherwise <c>false</c></returns>
            <remarks>
            The check is executed as defined in the delegate <see cref="P:SIT.Components.ObjectComparer.IConfiguration.CheckIgnoreMemberFunc"/>.
            If that property is not set <c>true</c> is returned
            </remarks>
        </member>
        <member name="P:SIT.Components.ObjectComparer.IConfiguration.CheckStopRecursionFunc">
            <summary>
            Gets or sets the delegate for checking about to stop a recursion
            </summary>
        </member>
        <member name="P:SIT.Components.ObjectComparer.IConfiguration.CheckIgnoreMemberFunc">
            <summary>
            Gets or sets the delegate for checking about to ignore a class member
            </summary>
        </member>
        <member name="P:SIT.Components.ObjectComparer.IConfiguration.GetMemberBindingFlags">
            <summary>
            Gets or sets the attributes used for searching class members
            </summary>
        </member>
        <member name="E:SIT.Components.ObjectComparer.IConfiguration.MetadataRetrievalOptionsChanged">
            <summary>
            Event raised, when property <see cref="P:SIT.Components.ObjectComparer.IConfiguration.MetadataRetrievalOptions"/> is changed.
            </summary>
        </member>
        <member name="P:SIT.Components.ObjectComparer.IConfiguration.MetadataRetrievalOptions">
            <summary>
            Gets or sets the options for retrieving the meta data of classes (by configured properties or by reflection and use of ComapreAttribute)
            </summary>
        </member>
        <member name="P:SIT.Components.ObjectComparer.IConfiguration.ClassDescriptions">
            <summary>
            Gets or sets a list of class descriptions, describing the types to be regarded by object comparer
            </summary>
        </member>
        <member name="T:SIT.Components.ObjectComparer.Configuration">
            <summary>
            Class describing how object comparison is performed
            </summary>
        </member>
        <member name="M:SIT.Components.ObjectComparer.Configuration.GetDefaultConfiguration">
            <summary>
            Creates a default configuration and returns it
            </summary>
            <returns>An instance of <c>Configuration</c> class representing a default configuration</returns>
        </member>
        <member name="M:SIT.Components.ObjectComparer.Configuration.DefaultCheckStopRecursion(SIT.Components.ObjectComparer.Context,System.Object,System.Type,System.Object,System.Reflection.MemberInfo)">
            <summary>
            Default function used to check if recursion should be stopped
            </summary>
            <param name="context">The context object used</param>
            <param name="parentValue">The value of the parent object</param>
            <param name="parentType">The type of the parent object</param>
            <param name="childValue">The value of the child object belonging to the given parent object</param>
            <param name="childPi">The <c>PropertyInfo</c> instance of the child object belonging to the given parent object</param>
            <returns><c>true</c>, when recursion should be stoppen, otherwise <c>false</c></returns>
        </member>
        <member name="F:SIT.Components.ObjectComparer.Configuration._propertyNamesToIgnore">
            <summary>
            Static list of strings containing names of properties which should not be regarded by object comparer
            </summary>
        </member>
        <member name="M:SIT.Components.ObjectComparer.Configuration.DefaultCheckIgnoreMember(System.Object)">
            <summary>
            Default function used to check if a property or field should be ignored by object comparer
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="F:SIT.Components.ObjectComparer.Configuration._checkStopRecursionFunc">
            <summary>
            Delegate for checking about to stop a recursion
            </summary>
        </member>
        <member name="M:SIT.Components.ObjectComparer.Configuration.CheckStopRecursion(SIT.Components.ObjectComparer.Context,System.Object,System.Type,System.Object,System.Reflection.MemberInfo)">
            <summary>
            Checks if a recursion should be stopped.
            </summary>
            <param name="context">The context object used</param>
            <param name="parentValue">The value of the parent object</param>
            <param name="parentType">The type of the parent object</param>
            <param name="childValue">The value of the child object belonging to the given parent object</param>
            <param name="childPi">The <c>PropertyInfo</c> instance of the child object belonging to the given parent object</param>
            <returns>
              <c>true</c>, when recursion should be stoppen, otherwise <c>false</c>
            </returns>
            <remarks>
            The check is executed as defined in the delegate 
            <see cref="P:SIT.Components.ObjectComparer.Configuration.CheckStopRecursionFunc"/>.
            If that property is not set 
            <c>true</c> is returned
            </remarks>
        </member>
        <member name="F:SIT.Components.ObjectComparer.Configuration._checkIgnoreMemberFunc">
            <summary>
            Delegate for checking about to ignore a class member
            </summary>
        </member>
        <member name="M:SIT.Components.ObjectComparer.Configuration.CheckIgnoreMember(System.Object)">
            <summary>
            Checks if a member of a type should be ignored or not.
            </summary>
            <param name="member">Either a string for the members name, a PropertyInfo object or an FieldInfo object</param>
            <returns>
              <c>true</c> if member has to be ignored; otherwise <c>false</c>
            </returns>
            <remarks>
            The check is executed as defined in the delegate 
            <see cref="P:SIT.Components.ObjectComparer.Configuration.CheckIgnoreMemberFunc"/>.
            If that property is not set 
            <c>true</c> is returned
            </remarks>
        </member>
        <member name="F:SIT.Components.ObjectComparer.Configuration._getPropertiesBindingFlags">
            <summary>
            the attributes used for searching class members
            </summary>
        </member>
        <member name="F:SIT.Components.ObjectComparer.Configuration._metadataRetrievalOptions">
            <summary>
            The options for retrieving the meta data of classes (by configured properties or by reflection and use of ComapreAttribute)
            </summary>
        </member>
        <member name="M:SIT.Components.ObjectComparer.Configuration.OnMetadataRetrievalOptionsChanged">
            <summary>
            Called when [metadata retrieval options changed].
            </summary>
        </member>
        <member name="F:SIT.Components.ObjectComparer.Configuration._classDescriptions">
            <summary>
            List of class descriptions, describing the types to be regarded by object comparer
            </summary>
        </member>
        <member name="M:SIT.Components.ObjectComparer.Configuration.ToXml">
            <summary>
            Creates Xml of this configuration instance
            </summary>
            <returns>A stream</returns>
        </member>
        <member name="M:SIT.Components.ObjectComparer.Configuration.ToXmlString">
            <summary>
            Creates Xml of this configuration
            </summary>
            <returns>A string</returns>
        </member>
        <member name="M:SIT.Components.ObjectComparer.Configuration.FromXml(System.IO.Stream)">
            <summary>
            Creates a new <see cref="T:SIT.Components.ObjectComparer.Configuration"/> instance from the given xml <paramref name="input"/>
            </summary>
            <param name="input">A stream containing xml string</param>
            <returns>A new <see cref="T:SIT.Components.ObjectComparer.Configuration"/> instance</returns>
        </member>
        <member name="M:SIT.Components.ObjectComparer.Configuration.FromXmlString(System.String)">
            <summary>
            Creates a new <see cref="T:SIT.Components.ObjectComparer.Configuration"/> instance from the given xml <paramref name="input"/>
            </summary>
            <param name="input">A string containing the xml data</param>
            <returns>A new <see cref="T:SIT.Components.ObjectComparer.Configuration"/> instance</returns>
        </member>
        <member name="M:SIT.Components.ObjectComparer.Configuration.UpdateMetadataFromNames">
            <summary>
            Updates the metadata from names.
            </summary>
            <exception cref="T:System.TypeLoadException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="P:SIT.Components.ObjectComparer.Configuration.Default">
            <summary>
            Gets the the default <see cref="T:SIT.Components.ObjectComparer.Configuration"/> instance which
            is based on meta data retrieval by CompareAttributes.
            </summary>
            <value>
            The default.
            </value>
        </member>
        <member name="P:SIT.Components.ObjectComparer.Configuration.CheckStopRecursionFunc">
            <summary>
            Gets or sets the delegate for checking about to stop a recursion
            </summary>
        </member>
        <member name="P:SIT.Components.ObjectComparer.Configuration.CheckIgnoreMemberFunc">
            <summary>
            Gets or sets the delegate for checking about to ignore a class member
            </summary>
        </member>
        <member name="P:SIT.Components.ObjectComparer.Configuration.GetMemberBindingFlags">
            <summary>
            Gets or sets the attributes used for searching class members
            </summary>
        </member>
        <member name="P:SIT.Components.ObjectComparer.Configuration.MetadataRetrievalOptions">
            <summary>
            Gets or sets the options for retrieving the meta data of classes (by configured properties or by reflection and use of ComapreAttribute)
            </summary>
        </member>
        <member name="E:SIT.Components.ObjectComparer.Configuration.MetadataRetrievalOptionsChanged">
            <summary>
            Event raised, when property <see cref="P:SIT.Components.ObjectComparer.Configuration.MetadataRetrievalOptions"/> is changed.
            </summary>
        </member>
        <member name="P:SIT.Components.ObjectComparer.Configuration.ClassDescriptions">
            <summary>
            Gets or sets a list of class descriptions, describing the types to be regarded by object comparer
            </summary>
        </member>
        <member name="T:SIT.Components.ObjectComparer.MetadataRetrievalOptions">
            <summary>
            Options defining types of how metadata about objects are retrieved.
            </summary>
        </member>
        <member name="F:SIT.Components.ObjectComparer.MetadataRetrievalOptions.ReflectCompareAttributes">
            <summary>
            Get types and properties to read by reflection through defined CompareAttributes (Default)
            </summary>
            <remarks>
            This is the default option and lets you decorate your classes with the CompareAttribute attribute.
            <c>ObjectComparer</c> iterates all properties of the objects which have to be compared and 
            searches for the CompareAttribute.
            </remarks>
        </member>
        <member name="F:SIT.Components.ObjectComparer.MetadataRetrievalOptions.ReflectDescriptions">
            <summary>
            Get types and properties to read by reflection through pre-configured lists of properties
            </summary>
            <remarks>
            This option is used in a scenario where you describe the types and their properties which have
            to be reflected in an external data store. If you use this option then <c>ObjectComparer</c>
            does not search for the CompareAttribute attributes. The advantage is that not all properties
            of an object which has to be compared are iterated.
            </remarks>
        </member>
        <member name="F:SIT.Components.ObjectComparer.MetadataRetrievalOptions.EmitPropertyDescription">
            <summary>
            Reserved for future use.
            </summary>
            <remarks>
            Feature has to be designed and implemented.
            </remarks>
        </member>
        <member name="T:SIT.Components.ObjectComparer.DeepCopy">
            <summary>
            Provides static methods to deep copy objects
            </summary>
        </member>
        <member name="M:SIT.Components.ObjectComparer.DeepCopy.Copy(System.Object)">
            <summary>
            Creates a deep copy of the specified source.
            </summary>
            <param name="source">The source object to create a deep copy of.</param>
            <returns>The deep copy of the given source object</returns>
        </member>
        <member name="M:SIT.Components.ObjectComparer.DeepCopy.Copy``1(``0)">
            <summary>
            Creates a deep copy of the specified source.
            </summary>
            <typeparam name="T">The type of object to copy</typeparam>
            <param name="source">The source object to create a deep copy of.</param>
            <returns>The deep copy of the given source object</returns>
        </member>
        <member name="M:SIT.Components.ObjectComparer.DeepCopy.CopyObject(System.Object)">
            <summary>
            Creates a deep copy of the specified source.
            </summary>
            <param name="source">The source object to create a deep copy of.</param>
            <returns>The deep copy of the given source object</returns>
            <remarks>
            For internal use only.
            </remarks>
        </member>
        <member name="M:SIT.Components.ObjectComparer.DeepCopy.CopyCollection(System.Object)">
            <summary>
            Creates a deep copy of the specified source collection.
            </summary>
            <param name="source">The source object to create a deep copy of.</param>
            <returns>The deep copy of the given source collection</returns>
            <remarks>
            For internal use only.
            </remarks>
        </member>
        <member name="T:SIT.Components.ObjectComparer.ObjectCompareItem">
            <summary>
            Represents an compare item of a not enumerable object for creating a change set
            </summary>
        </member>
        <member name="F:SIT.Components.ObjectComparer.ObjectCompareItem._trace">
            <summary>
            Holds trace helper
            </summary>
        </member>
        <member name="F:SIT.Components.ObjectComparer.ObjectCompareItem._properties">
            <summary>
            Holds a list of properties of the subjected object type
            </summary>
        </member>
        <member name="M:SIT.Components.ObjectComparer.ObjectCompareItem.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:SIT.Components.ObjectComparer.ObjectCompareItem.Create(SIT.Components.ObjectComparer.Snapshot,SIT.Components.ObjectComparer.Snapshot)">
            <summary>
            Fills the content of the compare item
            </summary>
            <param name="a">Snap shot A</param>
            <param name="b">Snap shot B</param>
            <returns>Return the type of change of the given snap shots</returns>
        </member>
        <member name="M:SIT.Components.ObjectComparer.ObjectCompareItem.ToString">
            <summary>
            Returns a string representing the changes between the origin snap shots
            </summary>
            <returns>A string representing the changes between the origin snap shots</returns>
        </member>
        <member name="P:SIT.Components.ObjectComparer.ObjectCompareItem.Trace">
            <summary>
            Gets Trace helper singleton
            </summary>
        </member>
        <member name="P:SIT.Components.ObjectComparer.ObjectCompareItem.Properties">
            <summary>
            Gets or sets the list of properties of the subjected object type
            </summary>
        </member>
        <member name="M:SIT.Components.ObjectComparer.EnumerableCompareItem.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SIT.Components.ObjectComparer.EnumerableCompareItem"/> class.
            </summary>
        </member>
        <member name="M:SIT.Components.ObjectComparer.EnumerableCompareItem.Create(SIT.Components.ObjectComparer.Snapshot,SIT.Components.ObjectComparer.Snapshot)">
            <summary>
            Fills the content of the compare item
            </summary>
            <param name="a">Snap shot A</param>
            <param name="b">Snap shot B</param>
            <returns>Return the type of change of the given snap shots</returns>
        </member>
        <member name="P:SIT.Components.ObjectComparer.EnumerableCompareItem.Childs">
            <summary>
            Gets or sets the childs.
            </summary>
            <value>
            The childs.
            </value>
        </member>
        <member name="T:SIT.Components.ObjectComparer.Snapshot">
            <summary>
            Provides methods and properties to take a defined snapshot of an object.
            </summary>
        </member>
        <member name="F:SIT.Components.ObjectComparer.SnapshotSerializableData._typeName">
            <summary>
            Type name of the instance from which the <c>SnapShot</c> is taken
            </summary>
        </member>
        <member name="F:SIT.Components.ObjectComparer.SnapshotSerializableData._name">
            <summary>
            Display name from the object
            </summary>
        </member>
        <member name="F:SIT.Components.ObjectComparer.SnapshotSerializableData._idPropertyName">
            <summary>
            The name of the property of the snapshotted object which holds an (unique) identifier.
            This identifier (id) is used to find same/compareable objects in lists of snapshots.
            </summary>
            <example>
            The following example shows how objects in a list are found which has to be compared.
            <code source="..\Documentation\Examples\Example_IdPropertyName\Program.cs" lang="cs"/>
            </example>
        </member>
        <member name="P:SIT.Components.ObjectComparer.SnapshotSerializableData.TypeName">
            <summary>
            Gets or sets the type name of the instance from which the <c>SnapShot</c> is taken
            </summary>
        </member>
        <member name="P:SIT.Components.ObjectComparer.SnapshotSerializableData.Name">
            <summary>
            Gets or sets the display name from the object.
            <remarks>
            Commonly the displayable name is set through the <c>CompareAttributes</c>
            </remarks>
            </summary>
        </member>
        <member name="P:SIT.Components.ObjectComparer.SnapshotSerializableData.IdPropertyName">
            <summary>
            Gets or sets the name of the property of the snapshotted object which holds an (unique) identifier.
            This identifier (id) is used to find same/compareable objects in lists of snapshots.
            </summary>
            <value>Gets or sets the data member _idPropertyName</value>
            <example>
            The following example shows how objects in a list are found which has to be compared.
            <code source="..\Documentation\Examples\Example_IdPropertyName\Program.cs" lang="cs"/>
            </example>
        </member>
        <member name="F:SIT.Components.ObjectComparer.SnapshotData._value">
            <summary>
            Value which represents this snapshot
            </summary>
        </member>
        <member name="P:SIT.Components.ObjectComparer.SnapshotData.Value">
            <summary>
            Gets or sets the value which represents this snapshot
            </summary>
            <remarks>
            If this is a SnapShot of a business class instance of type <c>Person</c> then the <c>Value</c> holds the reference to the <c>Person</c> object.
            </remarks>
        </member>
        <member name="M:SIT.Components.ObjectComparer.Snapshot.CreateEmpty">
            <summary>
            Creates an empty <c>Snapshot</c> object
            </summary>
            <returns>A <c>Snapshot</c> instance without data</returns>
        </member>
        <member name="M:SIT.Components.ObjectComparer.Snapshot.CreateEmpty(System.String)">
            <summary>
            Create an empty <c>Snapshot</c> object with <c>TypeName</c> property set
            </summary>
            <param name="typeName">The type name to set</param>
            <returns>A <c>Snapshot</c> instance without data but <c>TypeName</c> property</returns>
        </member>
        <member name="F:SIT.Components.ObjectComparer.Snapshot._idPropertyValue">
            <summary>
            The value of the property of the snapshotted object which which is an (unique) identifier
            </summary>
            <example>
            The following example shows how objects in a list are found which has to be compared.
            <code source="..\Documentation\Examples\Example_IdPropertyName\Program.cs" lang="cs"/>
            </example>
            <remarks>
            This identifier (id) is used to find same/compareable objects in lists of snapshots.
            </remarks>
        </member>
        <member name="F:SIT.Components.ObjectComparer.Snapshot._parent">
            <summary>
            Reference to a parent SnapShot if one exiss
            </summary>
        </member>
        <member name="M:SIT.Components.ObjectComparer.Snapshot.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SIT.Components.ObjectComparer.Snapshot"/> class.
            </summary>
        </member>
        <member name="F:SIT.Components.ObjectComparer.Snapshot._context">
            <summary>
            The context used for generating this snap shot
            </summary>
        </member>
        <member name="M:SIT.Components.ObjectComparer.Snapshot.Create(System.Object)">
            <summary>
            Fills the snap shot based on the given data <paramref name="value"/>
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:SIT.Components.ObjectComparer.Snapshot.Create(System.Object,SIT.Components.ObjectComparer.Context)">
            <summary>
            Fills the snap shot based on the given data <paramref name="value"/>
            with respect to the given context <paramref name="context"/>
            </summary>
            <param name="value">
            An object from which the snap shot should be created
            value can be null
            </param>
            <param name="context">
            The context used to create the snap shot
            value can be null
            </param>
        </member>
        <member name="M:SIT.Components.ObjectComparer.Snapshot.Create(System.Object,System.Reflection.MemberInfo,SIT.Components.ObjectComparer.Context)">
            <summary>
            Fills the snap shot based on the given data <paramref name="value"/>
            and/or <paramref name="pi"/> with respect to the given context <paramref name="context"/>
            </summary>
            <param name="value">
            An object from which the snap shot should be created
            value can be null
            </param>
            <param name="pi">
            The member info of a class which gets/sets/returns the given object <paramref name="value"/>
            value can be null
            </param>
            <param name="context">
            The context used to create the snap shot
            value can be null
            </param>
        </member>
        <member name="M:SIT.Components.ObjectComparer.Snapshot.Create(SIT.Components.ObjectComparer.Context,System.Object,System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            Fills the snap shot based on the given data <paramref name="value"/>
            and/or <paramref name="pi"/> with respect to the given context <paramref name="context"/>
            </summary>
            <remarks>
            The parameter <paramref name="stopRecursion"/> is used to indicate if searching for child properties should be executed.
            </remarks>
            <param name="context">
            The context used to create the snap shot
            value can be null
            </param>
            <param name="value">
            An object from which the snap shot should be created
            value can be null
            </param>
            <param name="mi">
            The member info of a class which gets/sets/returns the given object <paramref name="value"/>
            value can be null
            </param>
            <param name="stopRecursion"></param>
        </member>
        <member name="M:SIT.Components.ObjectComparer.Snapshot.CompareByIdPropertyValue(SIT.Components.ObjectComparer.Snapshot,SIT.Components.ObjectComparer.Snapshot)">
            <summary>
            Takes two snap shots of one object and compares the both values
            of the property which is defined as IdProperty
            </summary>
            <param name="a">Snap shot of an object <c>a</c> representing state <c>s0</c></param>
            <param name="b">Snap shot of an object <c>a</c> representing state <c>s1</c></param>
            <returns>
            Returns -1, 0, 1 for value <paramref name="a"/> of the property holding the id being 
            less than, equal to, or greater than that of value <paramref name="b"/>, respectively.
            </returns>
        </member>
        <member name="M:SIT.Components.ObjectComparer.Snapshot.CompareByValue(SIT.Components.ObjectComparer.Snapshot,SIT.Components.ObjectComparer.Snapshot)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="P:SIT.Components.ObjectComparer.Snapshot.IdPropertyValue">
            <summary>
            Gets or sets value of the property of the snapshotted object which which is an (unique) identifier
            </summary>
            <value>Gets or sets the data member _idPropertyValue</value>
            <example>
            The following example shows how objects in a list are found which has to be compared.
            <code source="..\Documentation\Examples\Example_IdPropertyName\Program.cs" lang="cs"/>
            </example>
            <remarks>
            This identifier (id) is used to find same/compareable objects in lists of snapshots.
            </remarks>
        </member>
        <member name="P:SIT.Components.ObjectComparer.Snapshot.Parent">
            <summary>
            Gets the parent.
            </summary>
        </member>
        <member name="P:SIT.Components.ObjectComparer.Snapshot.Context">
            <summary>
            Gets or sets the context object used for the generation of this snap shot
            </summary>
        </member>
        <member name="M:SIT.Components.ObjectComparer.ObjectSnapshot.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SIT.Components.ObjectComparer.ObjectSnapshot"/> class.
            </summary>
        </member>
        <member name="M:SIT.Components.ObjectComparer.ObjectSnapshot.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:SIT.Components.ObjectComparer.ObjectSnapshot"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:SIT.Components.ObjectComparer.ObjectSnapshot.#ctor(System.Object,SIT.Components.ObjectComparer.Context)">
            <summary>
            Initializes a new instance of the <see cref="T:SIT.Components.ObjectComparer.ObjectSnapshot"/> class.
            </summary>
            <param name="value">The value.</param>
            <param name="context">Context</param>
        </member>
        <member name="M:SIT.Components.ObjectComparer.EnumerableSnapshot.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:SIT.Components.ObjectComparer.EnumerableSnapshot"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:SIT.Components.ObjectComparer.EnumerableSnapshot.#ctor(System.Object,SIT.Components.ObjectComparer.Context)">
            <summary>
            Initializes a new instance of the <see cref="T:SIT.Components.ObjectComparer.EnumerableSnapshot"/> class.
            </summary>
            <param name="value">The value.</param>
            <param name="context">Context</param>
        </member>
        <member name="T:SIT.Components.ObjectComparer.Generic.DeepCopy">
            <summary>
            Provides static methods to deep copy objects
            </summary>
        </member>
        <member name="M:SIT.Components.ObjectComparer.Generic.DeepCopy.Copy``1(``0)">
            <summary>
            Creates a deep copy of the specified source.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source object to create a deep copy of.</param>
            <returns>The deep copy of the given source object</returns>
        </member>
        <!-- Ungültiger XML-Kommentar wurde für den Member 'T:SIT.Components.ObjectComparer.Generic.DeepCopyBase`1' ignoriert -->
        <member name="M:SIT.Components.ObjectComparer.Generic.DeepCopyBase`1.DeepCopy">
            <summary>
            Creates a deep copy of the object
            </summary>
            <returns>A new instance of the object</returns>
        </member>
        <member name="T:SIT.Components.ObjectComparer.ChangeType">
            <summary>
            Type of change
            </summary>
        </member>
        <member name="F:SIT.Components.ObjectComparer.ChangeType.Added">
            <summary>
            Item is new or added
            </summary>
        </member>
        <member name="F:SIT.Components.ObjectComparer.ChangeType.Removed">
            <summary>
            Item is not existent or removed
            </summary>
        </member>
        <member name="F:SIT.Components.ObjectComparer.ChangeType.Changed">
            <summary>
            Item has changed
            </summary>
        </member>
        <member name="F:SIT.Components.ObjectComparer.ChangeType.Unchanged">
            <summary>
            Item has not changed
            </summary>
        </member>
        <member name="T:SIT.Components.ObjectComparer.Tools">
            <summary>
            Some helping tools
            </summary>
        </member>
        <member name="M:SIT.Components.ObjectComparer.Tools.GetAttribute(System.Object,System.Type)">
             <summary>
             Searches for a attribute of a type on a given object
             </summary>
             <param name="value">The object which to search on</param>
             <param name="attribute">The type of the attribute to search</param>
             <returns>If the attribute is found it is returned, otherwise <c>null</c></returns>
             <remarks>
             The search for the attribute also includes checks for the BaseType of the attribute.
             That means, if you create a new attribute class "A2Attribute" which derives from <c>A1Attribute</c>
             and you use <c>A2Attribute</c> on a class <c>C</c> then the search for <c>A1Attribute</c>
             on class <c>C</c> returns an instance of <c>A1Attribute</c>.
             </remarks>
             <example>
             The following example shows how to get the Displayname attribute of an object
             <code>
             [AttributeUsage( AttributeTargets.Class | AttributeTargets.Property)]
             public class DisplaynameAttribute : Attribute {
             
                 protected string _displayname;
                 public property Displayname{ get{return _displayname;} set{_displayname=value;} }
                 
                 public DisplaynameAttribute() : base() {}
                 public DisplaynameAttribute( string displayname ) : this(){
                     _displayname = displayname;
                 }
             
             }
             
             [AttributeUsage( AttributeTargets.Class | AttributeTargets.Property)]
             public class DisplaynameExAttribute : DisplaynameAttribute{
             
                 private string _displayname2;
                 public property Displayname2{ get{return _displayname2;} set{_displayname=value2;} }
            
                 public DisplaynameAttributeEx() : base() {}
                 public DisplaynameAttributeEx( string displayname ) : base(displayname){}
                 public DisplaynameAttributeEx( string displayname, string displayname2 ) : this(displayname){
                     _displayname2 = displayname2;
                 }
                 
             }
             
             [DisplayName("PersonEntity")]
             public class Person {
             
                 private string _fullname;
                 
                 [DisplayName("Persons full name")]
                 public string Fullname{ get{return _fullname;} set{_fullname=value;} }
                 
                 private string _nickname;
                 
                 [DisplayNameEx("Persons nick name", "the nick")]
                 public string Nickname{ get{return _nickname;} {_nickname=value;} }
             
             }
             
             public class Program{
             
                 public void main(){
                     // Get the Displayname of the Person class its self
                     Person myPerson = new Person();
                     System.ComponentModel.DisplayNameAttribute foundAttribute = 
                         SIT.Components.ObjectComparer.Tools.GetAttribute( myPerson, typeof(System.ComponentModel.DisplayNameAttribute) );
                     Console.WriteLine( "Object myPerson has Displayname: {0}", foundAttribute.DisplayName );
                     
                     // Get the Displayname of the property Fullname of the class Person class
                     System.Type personType = typeof( Person );
                     System.Reflection.PropertyInfo pi = personType.GetProperty( "Fullname" );
                     foundAttribute = 
                         SIT.Components.ObjectComparer.Tools.GetAttribute( pi, typeof(System.ComponentModel.DisplayNameAttribute) );
                     Console.WriteLine( "Property Fullname has Displayname: {0}", foundAttribute.DisplayName );
                     
                     System.Reflection.PropertyInfo pi = personType.GetProperty( "Nickname" );
                     foundAttribute = 
                         SIT.Components.ObjectComparer.Tools.GetAttribute( pi, typeof(System.ComponentModel.DisplayNameAttribute) );
                     Console.WriteLine( "Property Fullname has Displayname: {0}", foundAttribute.DisplayName );
            
                 }
             
             }
             </code>
             The console output is:
             PersonEntity
             Persons full name
             Persons nick name
             </example>
        </member>
    </members>
</doc>
