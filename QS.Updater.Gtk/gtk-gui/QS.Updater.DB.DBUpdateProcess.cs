
// This file has been generated by the GUI designer. Do not modify.
namespace QS.Updater.DB
{
	public partial class DBUpdateProcess
	{
		private global::Gtk.Label label1;

		private global::Gtk.CheckButton checkCreateBackup;

		private global::Gtk.HBox hbox1;

		private global::Gtk.Entry entryFileName;

		private global::Gtk.Button buttonFileChooser;

		private global::Gtk.ProgressBar progressbarTotal;

		private global::Gtk.ProgressBar progressbarOperation;

		private global::Gtk.Expander expander1;

		private global::Gtk.ScrolledWindow GtkScrolledWindow;

		private global::Gtk.TextView textviewLog;

		private global::Gtk.Label GtkLabel2;

		private global::Gtk.Button buttonCancel;

		private global::Gtk.Button buttonOk;

		protected virtual void Build()
		{
			global::Stetic.Gui.Initialize(this);
			// Widget QS.Updater.DB.DBUpdateProcess
			this.Name = "QS.Updater.DB.DBUpdateProcess";
			this.Title = global::Mono.Unix.Catalog.GetString("Требуется обновление базы данных");
			this.WindowPosition = ((global::Gtk.WindowPosition)(4));
			// Internal child QS.Updater.DB.DBUpdateProcess.VBox
			global::Gtk.VBox w1 = this.VBox;
			w1.Name = "dialog1_VBox";
			w1.BorderWidth = ((uint)(2));
			// Container child dialog1_VBox.Gtk.Box+BoxChild
			this.label1 = new global::Gtk.Label();
			this.label1.Name = "label1";
			this.label1.LabelProp = global::Mono.Unix.Catalog.GetString("После обновления базы, предыдущие версии программы не будут работать. Во избежани" +
					"и порчи данных, убедитесь что в момент обновления никто не использует базу в раб" +
					"оте.");
			this.label1.Wrap = true;
			w1.Add(this.label1);
			global::Gtk.Box.BoxChild w2 = ((global::Gtk.Box.BoxChild)(w1[this.label1]));
			w2.Position = 0;
			w2.Expand = false;
			w2.Fill = false;
			// Container child dialog1_VBox.Gtk.Box+BoxChild
			this.checkCreateBackup = new global::Gtk.CheckButton();
			this.checkCreateBackup.CanFocus = true;
			this.checkCreateBackup.Name = "checkCreateBackup";
			this.checkCreateBackup.Label = global::Mono.Unix.Catalog.GetString("Создать резервную копию перед обновлением");
			this.checkCreateBackup.Active = true;
			this.checkCreateBackup.DrawIndicator = true;
			this.checkCreateBackup.UseUnderline = true;
			w1.Add(this.checkCreateBackup);
			global::Gtk.Box.BoxChild w3 = ((global::Gtk.Box.BoxChild)(w1[this.checkCreateBackup]));
			w3.Position = 1;
			w3.Expand = false;
			w3.Fill = false;
			// Container child dialog1_VBox.Gtk.Box+BoxChild
			this.hbox1 = new global::Gtk.HBox();
			this.hbox1.Name = "hbox1";
			this.hbox1.Spacing = 6;
			this.hbox1.BorderWidth = ((uint)(6));
			// Container child hbox1.Gtk.Box+BoxChild
			this.entryFileName = new global::Gtk.Entry();
			this.entryFileName.CanFocus = true;
			this.entryFileName.Name = "entryFileName";
			this.entryFileName.IsEditable = false;
			this.entryFileName.InvisibleChar = '●';
			this.hbox1.Add(this.entryFileName);
			global::Gtk.Box.BoxChild w4 = ((global::Gtk.Box.BoxChild)(this.hbox1[this.entryFileName]));
			w4.Position = 0;
			// Container child hbox1.Gtk.Box+BoxChild
			this.buttonFileChooser = new global::Gtk.Button();
			this.buttonFileChooser.CanFocus = true;
			this.buttonFileChooser.Name = "buttonFileChooser";
			this.buttonFileChooser.UseUnderline = true;
			global::Gtk.Image w5 = new global::Gtk.Image();
			w5.Pixbuf = global::Stetic.IconLoader.LoadIcon(this, "gtk-directory", global::Gtk.IconSize.Menu);
			this.buttonFileChooser.Image = w5;
			this.hbox1.Add(this.buttonFileChooser);
			global::Gtk.Box.BoxChild w6 = ((global::Gtk.Box.BoxChild)(this.hbox1[this.buttonFileChooser]));
			w6.Position = 1;
			w6.Expand = false;
			w6.Fill = false;
			w1.Add(this.hbox1);
			global::Gtk.Box.BoxChild w7 = ((global::Gtk.Box.BoxChild)(w1[this.hbox1]));
			w7.Position = 2;
			w7.Expand = false;
			w7.Fill = false;
			// Container child dialog1_VBox.Gtk.Box+BoxChild
			this.progressbarTotal = new global::Gtk.ProgressBar();
			this.progressbarTotal.Name = "progressbarTotal";
			w1.Add(this.progressbarTotal);
			global::Gtk.Box.BoxChild w8 = ((global::Gtk.Box.BoxChild)(w1[this.progressbarTotal]));
			w8.Position = 3;
			w8.Expand = false;
			w8.Fill = false;
			// Container child dialog1_VBox.Gtk.Box+BoxChild
			this.progressbarOperation = new global::Gtk.ProgressBar();
			this.progressbarOperation.Name = "progressbarOperation";
			w1.Add(this.progressbarOperation);
			global::Gtk.Box.BoxChild w9 = ((global::Gtk.Box.BoxChild)(w1[this.progressbarOperation]));
			w9.Position = 4;
			w9.Expand = false;
			w9.Fill = false;
			// Container child dialog1_VBox.Gtk.Box+BoxChild
			this.expander1 = new global::Gtk.Expander(null);
			this.expander1.CanFocus = true;
			this.expander1.Name = "expander1";
			// Container child expander1.Gtk.Container+ContainerChild
			this.GtkScrolledWindow = new global::Gtk.ScrolledWindow();
			this.GtkScrolledWindow.HeightRequest = 246;
			this.GtkScrolledWindow.Name = "GtkScrolledWindow";
			this.GtkScrolledWindow.ShadowType = ((global::Gtk.ShadowType)(1));
			// Container child GtkScrolledWindow.Gtk.Container+ContainerChild
			this.textviewLog = new global::Gtk.TextView();
			this.textviewLog.CanFocus = true;
			this.textviewLog.Name = "textviewLog";
			this.GtkScrolledWindow.Add(this.textviewLog);
			this.expander1.Add(this.GtkScrolledWindow);
			this.GtkLabel2 = new global::Gtk.Label();
			this.GtkLabel2.Name = "GtkLabel2";
			this.GtkLabel2.LabelProp = global::Mono.Unix.Catalog.GetString("Технический журнал");
			this.GtkLabel2.UseUnderline = true;
			this.expander1.LabelWidget = this.GtkLabel2;
			w1.Add(this.expander1);
			global::Gtk.Box.BoxChild w12 = ((global::Gtk.Box.BoxChild)(w1[this.expander1]));
			w12.Position = 5;
			// Internal child QS.Updater.DB.DBUpdateProcess.ActionArea
			global::Gtk.HButtonBox w13 = this.ActionArea;
			w13.Name = "dialog1_ActionArea";
			w13.Spacing = 10;
			w13.BorderWidth = ((uint)(5));
			w13.LayoutStyle = ((global::Gtk.ButtonBoxStyle)(4));
			// Container child dialog1_ActionArea.Gtk.ButtonBox+ButtonBoxChild
			this.buttonCancel = new global::Gtk.Button();
			this.buttonCancel.CanDefault = true;
			this.buttonCancel.CanFocus = true;
			this.buttonCancel.Name = "buttonCancel";
			this.buttonCancel.UseStock = true;
			this.buttonCancel.UseUnderline = true;
			this.buttonCancel.Label = "gtk-cancel";
			this.AddActionWidget(this.buttonCancel, -6);
			global::Gtk.ButtonBox.ButtonBoxChild w14 = ((global::Gtk.ButtonBox.ButtonBoxChild)(w13[this.buttonCancel]));
			w14.Expand = false;
			w14.Fill = false;
			// Container child dialog1_ActionArea.Gtk.ButtonBox+ButtonBoxChild
			this.buttonOk = new global::Gtk.Button();
			this.buttonOk.CanDefault = true;
			this.buttonOk.CanFocus = true;
			this.buttonOk.Name = "buttonOk";
			this.buttonOk.UseStock = true;
			this.buttonOk.UseUnderline = true;
			this.buttonOk.Label = "gtk-execute";
			w13.Add(this.buttonOk);
			global::Gtk.ButtonBox.ButtonBoxChild w15 = ((global::Gtk.ButtonBox.ButtonBoxChild)(w13[this.buttonOk]));
			w15.Position = 1;
			w15.Expand = false;
			w15.Fill = false;
			if ((this.Child != null))
			{
				this.Child.ShowAll();
			}
			this.DefaultWidth = 487;
			this.DefaultHeight = 382;
			this.progressbarOperation.Hide();
			this.Show();
			this.checkCreateBackup.Toggled += new global::System.EventHandler(this.OnCheckCreateBackupToggled);
			this.buttonFileChooser.Clicked += new global::System.EventHandler(this.OnButtonFileChooserClicked);
			this.buttonOk.Clicked += new global::System.EventHandler(this.OnButtonOkClicked);
		}
	}
}
