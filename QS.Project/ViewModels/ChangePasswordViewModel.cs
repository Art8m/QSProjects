using System;
using System.Collections.Generic;
using System.Data.Common;
using System.Linq;
using System.Security;
using QS.Navigation;
using QS.Project.DB;
using QS.Project.DB.Passwords;
using QS.Utilities.Text;
using QS.Validation;
using QS.ViewModels.Dialog;

namespace QS.ViewModels
{
    public class ChangePasswordViewModel : DialogViewModelBase
    {
        public ChangePasswordViewModel(IDatabasePasswordModel databasePasswordModel, DbConnection dbConnection,
            IPasswordValidator passwordValidator, INavigationManager navigation)
            : base(navigation)
        {
            this.databasePasswordModel = databasePasswordModel ?? throw new ArgumentNullException(nameof(databasePasswordModel));
            this.dbConnection = dbConnection ?? throw new ArgumentNullException(nameof(dbConnection));
            this.passwordValidator = passwordValidator ?? throw new ArgumentNullException(nameof(passwordValidator));
            OnPasswordUpdated();
        }

        private readonly IDatabasePasswordModel databasePasswordModel;
        private readonly DbConnection dbConnection;
        private readonly IPasswordValidator passwordValidator;
        
        public int? MaxMessages => 3;

        private bool canSave;
        public bool CanSave {
            get => canSave;
            set => SetField(ref canSave, value);
        }

        private string validationStatus;
        public string ValidationStatus {
            get => validationStatus;
            set => SetField(ref validationStatus, value);
        }

        private SecureString oldPassword;
        public SecureString OldPassword {
            get => oldPassword;
            set {
                if(SetField(ref oldPassword, value)) {
                    OnPasswordUpdated();
                }
            }
        }

        private SecureString newPassword;
        public SecureString NewPassword {
            get => newPassword;
            set {
                if(SetField(ref newPassword, value)) {
                    OnPasswordUpdated();
                }
            }
        }

        private SecureString newPasswordConfirm;
        public SecureString NewPasswordConfirm {
            get => newPasswordConfirm;
            set {
                if(SetField(ref newPasswordConfirm, value)) {
                    OnPasswordUpdated();
                }
            }
        }

        public bool Save()
        {
            if(!CanSave) {
                return false;
            }
            if(!databasePasswordModel.IsCurrentUserPassword(dbConnection, OldPassword?.ToPlainString())) {
                SetValidationResult(false, "–ù–µ–≤–µ—Ä–Ω–æ –≤–≤–µ–¥—ë–Ω —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å");
                return false;
            }
            if(databasePasswordModel.IsCurrentUserPassword(dbConnection, NewPassword?.ToPlainString())) {
                SetValidationResult(false, "–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –Ω–µ –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º");
                return false;
            }
            SaveNewPassword();
            return true;
        }

        private void SaveNewPassword()
        {
            databasePasswordModel.ChangePassword(dbConnection, newPassword?.ToPlainString());
            var dbConnectionStringBuilder = new DbConnectionStringBuilder {
                ConnectionString = Connection.ConnectionString,
                ["Password"] = newPassword?.ToPlainString()
            };

            //–ó–∞–º–µ–Ω—è–µ–º –ø–∞—Ä–æ–ª—å —Å —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–æ–∫–µ –æ–¥–∫–ª—é—á–µ–Ω–∏—è, –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –ø—Ä–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –Ω–µ –±—ã–ª–æ –æ—à–∏–±–æ–∫ 
            //–∏ —á—Ç–æ–±—ã –ø—Ä–∏ —Å–º–µ–Ω–µ –ø–∞—Ä–æ–ª—è –µ—â–µ —Ä–∞–∑ –±—ã–ª —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å.
            Connection.ChangeDbConnectionString(dbConnectionStringBuilder.ConnectionString);
        }

        private void OnPasswordUpdated()
        {
            var errorMessages = new List<string>();
            if(!passwordValidator.Validate(NewPassword?.ToPlainString(), out var messages)) {
                errorMessages.AddRange(messages);
            }
            if(newPassword?.ToPlainString() != newPasswordConfirm?.ToPlainString()) {
                errorMessages.Add("–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç");
            }

            if(errorMessages.Any()) {
                SetValidationResult(false, String.Join("\n", MaxMessages.HasValue ? errorMessages.Take(MaxMessages.Value) : errorMessages));
            }
            else {
                SetValidationResult(true, "üó∏");
            }
        }

        private void SetValidationResult(bool isValid, string message)
        {
            CanSave = isValid;
            ValidationStatus = message;
        }
    }
}
